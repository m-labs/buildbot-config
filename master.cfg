# -*- python -*- # ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Don't store secrets bare in the configuration file.
import json
secrets = json.load(open('secrets.json'))

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [
    BuildSlave('debian-stretch-amd64-1', secrets['slave_password'],
               properties={ 'jobs': 1 }),
    BuildSlave('debian-stretch-amd64-2', secrets['slave_password'],
               properties={ 'jobs': 1 }),
    BuildSlave('debian-stretch-amd64-3', secrets['slave_password'],
               properties={ 'jobs': 1 }),
    BuildSlave('windows-7-amd64-1', secrets['slave_password'],
               properties={ 'jobs': 1 }),
]

buildslaves = {
    # To provision a Linux buildslave:
    #  * buildslave create-slave [name] localhost [name] [password]
    #  * install conda in .../miniconda/
    #  * source .../miniconda/bin/activate root
    #  * conda install -y conda-build anaconda-client
    #  * mkdir -p .../miniconda/conda-bld/linux-64
    #  * conda-index .../miniconda/conda-bld/linux-64
    'debian-stretch-amd64':
        ['debian-stretch-amd64-1', 'debian-stretch-amd64-2',
         'debian-stretch-amd64-3'],
    # To provision a Windows buildslave:
    #  * http://trac.buildbot.net/wiki/RunningBuildbotOnWindows
    #  * Install miniconda into .../miniconda/
    #  * set PATH=.../miniconda/Scripts;%PATH%
    #  * conda install -y conda-build anaconda-client
    #  * mkdir .../miniconda/conda-bld/win-64
    #  * conda-index .../miniconda/conda-bld/win-64
    'windows-7-amd64': ['windows-7-amd64-1'],
}

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

import re, random, pysftp
from twisted.internet.threads import deferToThread
from buildbot import locks
from buildbot.process.properties import WithProperties
from buildbot.process.factory import BuildFactory
from buildbot.process.buildstep import BuildStep
from buildbot.status.builder import SUCCESS, FAILURE
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Configure, SetPropertyFromCommand, ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.trigger import Trigger
from commands import LitTestCommand, CoverallsCommand

conda_lock = locks.SlaveLock('conda', maxCount=1)

def nextSlave(builder, slave_builders):
    def busyRatio(slave_builder):
        all_builders = slave_builder.slave.slavebuilders.values()
        active_builders = [sb for sb in all_builders if sb.isBusy()]
        return len(active_builders)

    return min(slave_builders, key=busyRatio)

conda_env_name = 'buildbot-%(buildername)s-%(buildnumber)s'
def condaEnv(use_local=False, extra_vars={}):
    if os.name == 'nt':
        bin_dir  = 'Scripts'
        path_var = '%PATH%'
    else:
        bin_dir  = 'bin'
        path_var = '${PATH}'

    if use_local:
        bin_path = os.path.join('%(builddir)s', '..', 'miniconda', 'envs',
                                conda_env_name, bin_dir)
    else:
        bin_path = os.path.join('%(builddir)s', '..', 'miniconda', bin_dir)

    path = WithProperties(os.pathsep.join(bin_path, path_var))

    env = {
        'PATH': path,
        'BUILDNUMBER': WithProperties('%(buildnumber)s'),
        # otherwise, conda's stdout and tests' stderr output interleaves badly.
        'PYTHONUNBUFFERED': '1'
    }
    env.update(extra_vars)
    return env

class CondaSanityCheckStep(BuildStep):
    def describe(self, done=False):
        return ['sanity check', 'conda']

    def start(self):
        if '--py_0+git' in self.getProperty('output_name'):
            self.finished(FAILURE)
        self.finished(SUCCESS)

def addCondaBuildSteps(factory, project, package):
    build_cmd = ['conda', 'build', '--python', '3.5',
                 WithProperties(os.path.join('conda', package))]

    factory.addStep(
        Git(repourl           = 'https://github.com/m-labs/{}'.format(project),
            submodules        = True,
            mode              = 'incremental',
            progress          = True))

    factory.addStep(
        ShellCommand(
            name              = 'conda_clean_lock',
            command           = ['conda', 'clean', '--lock'],
            description       = 'cleaning',
            descriptionDone   = 'clean',
            descriptionSuffix = 'locks',
            haltOnFailure     = True,
            env               = condaEnv(),
            locks             = [conda_lock.access('exclusive')]))

    factory.addStep(
        ShellCommand(
            name              = 'conda_build',
            command           = build_cmd,
            description       = 'building',
            descriptionDone   = 'build',
            haltOnFailure     = True,
            timeout           = 60*60*4,
            env               = condaEnv(),
            locks             = [conda_lock.access('exclusive')]))

    factory.addStep(
        SetPropertyFromCommand(
            name              = 'get_output_name',
            command           = build_cmd + ['--output'],
            property          = 'output_name',
            description       = 'getting',
            descriptionSuffix = 'output name',
            haltOnFailure     = True,
            env               = condaEnv(),
            locks             = [conda_lock.access('exclusive')]))

    factory.addStep(
        CondaSanityCheckStep(
            name              = 'conda_sanity_check',
            haltOnFailure     = True))

def addCondaUploadSteps(factory):
    factory.addStep(
        ShellCommand(
            name              = 'anaconda_upload',
            command           = ['anaconda', 'upload',
                                 '--user', 'm-labs', '--channel', 'dev',
                                 '--force', WithProperties('%(output_name)s')],
            description       = 'uploading',
            descriptionDone   = 'upload',
            descriptionSuffix = 'package',
            env               = condaEnv()))

def addCondaSetupTestEnvironmentSteps(factory, packages=[], local_package=None):
    factory.addStep(
        ShellCommand(
            name              = 'conda_create',
            command           = ['conda', 'create',
                                 '-n', WithProperties(conda_env_name)] +
                                 packages,
            description       = 'creating',
            descriptionDone   = 'create',
            descriptionSuffix = 'test environment',
            haltOnFailure     = True,
            env               = condaEnv(),
            locks             = [conda_lock.access('exclusive')]))

    if local_package is None:
        return

    factory.addStep(
        ShellCommand(
            name              = 'conda_install',
            command           = ['conda', 'install',
                                 '-n', WithProperties(conda_env_name),
                                 '--use-local', local_package],
            description       = 'installing',
            descriptionDone   = 'install',
            haltOnFailure     = True,
            env               = condaEnv(use_local=True),
            locks             = [conda_lock.access('exclusive')]))

def addCondaTeardownTestEnvironmentSteps(factory):
    factory.addStep(
        ShellCommand(
            name              = 'conda_remove',
            command           = ['conda', 'remove',
                                 '-n', WithProperties(conda_env_name),
                                 '--all'],
            description       = 'destroying',
            descriptionDone   = 'destroy',
            descriptionSuffix = 'test environment',
            alwaysRun         = True,
            env               = condaEnv(),
            locks             = [conda_lock.access('exclusive')]))

def addPythonUnittestSteps(factory):
    factory.addStep(
        ShellCommand(
            name              = 'python_unittest',
            command           = ['python', 'setup.py', 'test'],
            description       = 'testing',
            descriptionDone   = 'test',
            haltOnFailure     = True,
            env               = condaEnv(use_local=True)))

def addPythonCoverageSteps(factory, source_path):
    factory.addStep(
        ShellCommand(
            name              = 'python_unittest',
            command           = ['coverage', 'run', '--parallel-mode',
                                 '--source', source_path, 'setup.py', 'test'],
            description       = 'testing',
            descriptionDone   = 'test',
            descriptionSuffix = 'unittest',
            haltOnFailure     = True,
            env               = condaEnv(use_local=True)))

def addLitSteps(factory, test_path, extra_vars={}):
    factory.addStep(
        LitTestCommand(
            name              = 'lit_test',
            command           = ['lit', '-v', test_path],
            description       = 'testing',
            descriptionDone   = 'test',
            descriptionSuffix = 'lit',
            haltOnFailure     = True,
            env               = condaEnv(use_local=True,
                                         extra_vars=extra_vars)))

def addSphinxDocumentSteps(factory, source_path, target_path):
    factory.addStep(
        ShellCommand(
            name              = 'make_doc',
            command           = ['make', '-C', source_path, 'html'],
            description       = 'documenting',
            descriptionDone   = 'document',
            env               = condaEnv(use_local=True)))

    factory.addStep(
        DirectoryUpload(
            name              = 'upload_doc',
            slavesrc          = os.path.join(source_path, '_build', 'html'),
            masterdest        = target_path))


class DeployDocStep(BuildStep):
    def __init__(self, source_path, target_host,
                 username, password, target_path,
                 *args, **kwargs):
        BuildStep.__init__(self, *args, **kwargs)
        self.source_path = source_path
        self.target_host = target_host
        self.username    = username
        self.password    = password
        self.target_path = target_path

    def describe(self, done=False):
        return ['deploy' if done else 'deploying', 'doc']

    def start(self):
        deferred = deferToThread(self._upload)
        deferred.addCallback(lambda val: self.finished(SUCCESS))
        return deferred

    def _upload(self):
        with pysftp.Connection(self.target_host,
                               username=self.username,
                               password=self.password) as sftp:
            oldfiles, olddirs = [], []
            sftp.makedirs(self.target_path)
            sftp.walktree(self.target_path,
                          fcallback=lambda f: oldfiles.append(f),
                          ucallback=lambda f: oldfiles.append(f),
                          dcallback=lambda d: olddirs.append(d))
            for f in oldfiles: sftp.unlink(f)
            for d in olddirs:  sftp.rmdir(d)
            sftp.put_r(self.source_path, self.target_path)

def addSFTPUploadSteps(factory, source_path, target_host,
                       username, password, target_path):
    factory.addStep(
        DeployDocStep(
            name              = 'deploy_doc',
            source_path       = source_path,
            target_host       = target_host,
            username          = username,
            password          = password,
            target_path       = target_path))

def addPythonCoverageCombineSteps(factory):
    factory.addStep(
        ShellCommand(
            name              = 'coverage_combine',
            # run this through the shell
            command           = 'coverage combine .coverage.*',
            description       = 'combining',
            descriptionDone   = 'combine',
            descriptionSuffix = 'coverage',
            env               = condaEnv(use_local=True)))

def addCoverallsUploadSteps(factory, repo_token):
    factory.addStep(
        CoverallsCommand(
            name              = 'coveralls_upload',
            description       = 'uploading',
            descriptionDone   = 'upload',
            descriptionSuffix = 'coveralls',
            flunkOnFailure    = False,
            warnOnFailure     = True,
            env               = condaEnv(extra_vars={
                'COVERALLS_REPO_TOKEN': repo_token
            })))

def addTriggerSteps(factory, builder_names, alwaysUseLatest):
    factory.addStep(
        Trigger(
            schedulerNames    = map(lambda name: 'trigger-{}'.format(name),
                                    builder_names),
            alwaysUseLatest   = alwaysUseLatest))

from buildbot.config import BuilderConfig

c['builders'] = []

c['mergeRequests'] = True

####### MIGEN
# apt-get install verilator

migenBuildFactory = BuildFactory()
addCondaBuildSteps(migenBuildFactory,
    project='migen', package='migen')
addCondaSetupTestEnvironmentSteps(migenBuildFactory,
    packages=['numpydoc'], local_package='migen')
addPythonUnittestSteps(migenBuildFactory)
addSphinxDocumentSteps(migenBuildFactory,
    source_path='doc', target_path='migen')
addCondaTeardownTestEnvironmentSteps(migenBuildFactory)
addCondaUploadSteps(migenBuildFactory)
addTriggerSteps(migenBuildFactory, ['misoc'],
    alwaysUseLatest=True)

c['builders'].append(
    BuilderConfig(
        name       = 'migen',
        slavenames = buildslaves['debian-stretch-amd64'],
        nextSlave  = nextSlave,
        factory    = migenBuildFactory))

####### MISOC

misocBuildFactory = BuildFactory()
addCondaBuildSteps(misocBuildFactory,
    project='misoc', package='misoc')
addCondaUploadSteps(misocBuildFactory)
addTriggerSteps(misocBuildFactory, ['artiq'],
    alwaysUseLatest=True)

c['builders'].append(
    BuilderConfig(
        name       = 'misoc',
        slavenames = buildslaves['debian-stretch-amd64'],
        nextSlave  = nextSlave,
        factory    = misocBuildFactory))

####### ARTIQ
# apt-get install iverilog

boards = [
    'artiq-pipistrello-nist_qc1',
    'artiq-kc705-nist_qc1',
    'artiq-kc705-nist_qc2',
    'artiq-kc705-nist_clock',
]

artiqBuildFactory = BuildFactory()
addCondaBuildSteps(artiqBuildFactory,
    project='artiq', package='artiq')
addCondaSetupTestEnvironmentSteps(artiqBuildFactory,
    packages=['pip', 'sphinx', 'sphinx-argparse', 'coverage', 'lit', 'OutputCheck',
              'migen', 'misoc'],
    local_package='artiq')
addPythonCoverageSteps(artiqBuildFactory,
    source_path='artiq')
addLitSteps(artiqBuildFactory,
    test_path='artiq/test/lit',
    extra_vars={ 'COVERAGE': '1' })
addPythonCoverageCombineSteps(artiqBuildFactory)
addSphinxDocumentSteps(artiqBuildFactory,
    source_path='doc/manual', target_path='artiq/manual')
addSFTPUploadSteps(artiqBuildFactory,
    source_path='artiq/manual',
    target_host='m-labs.hk',
    username=secrets['sftp']['username'],
    password=secrets['sftp']['password'],
    target_path='artiq/manual')
addCondaTeardownTestEnvironmentSteps(artiqBuildFactory)
addCondaUploadSteps(artiqBuildFactory)
addCoverallsUploadSteps(artiqBuildFactory,
    repo_token=secrets['coveralls']['artiq'])
addTriggerSteps(artiqBuildFactory,
    boards, alwaysUseLatest=False)

c['builders'].append(
    BuilderConfig(
        name       = 'artiq',
        slavenames = buildslaves['debian-stretch-amd64'],
        nextSlave  = nextSlave,
        factory    = artiqBuildFactory))

for board in boards:
    artiqBoardBuildFactory = BuildFactory()
    addCondaBuildSteps(artiqBoardBuildFactory,
        project='artiq', package=board)
    addCondaUploadSteps(artiqBoardBuildFactory)

    c['builders'].append(
        BuilderConfig(
            name       = board,
            slavenames = buildslaves['debian-stretch-amd64'],
            nextSlave  = nextSlave,
            factory    = artiqBoardBuildFactory))

####### Our Conda recipes

condaBuildFactory = BuildFactory()
addCondaBuildSteps(condaBuildFactory,
    project='conda-recipes', package='%(package)s')

addCondaUploadSteps(condaBuildFactory)

c['builders'].append(
    BuilderConfig(
        name       = 'conda-win64',
        slavenames = buildslaves['windows-7-amd64'],
        nextSlave  = nextSlave,
        factory    = condaBuildFactory))

c['builders'].append(
    BuilderConfig(
        name       = 'conda-lin64',
        slavenames = buildslaves['debian-stretch-amd64'],
        nextSlave  = nextSlave,
        factory    = condaBuildFactory))

####### SCHEDULERS

from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes.filter import ChangeFilter

c['schedulers'] = []

c['schedulers'].append(
    ForceScheduler(
        name            = 'force',
        builderNames    = map(lambda builder: builder.name, c['builders'])))

for builder in c['builders']:
    c['schedulers'].append(
        Triggerable(
            name         = 'trigger-{}'.format(builder.name),
            builderNames = [builder.name]))

for project in ['misoc', 'migen', 'artiq']:
    c['schedulers'].append(
        SingleBranchScheduler(
            name            = project,
            change_filter   = ChangeFilter(project=project, branch='master'),
            treeStableTimer = 5,
            builderNames    = [project]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail, words
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth

authz = Authz(
    auth                   = BasicAuth([(str(secrets['web']['username']),
                                         str(secrets['web']['password']))]),
    forceBuild             = 'auth',
    forceAllBuilds         = 'auth',
    stopBuild              = 'auth',
    stopAllBuilds          = 'auth',
    cancelPendingBuild     = 'auth',
    stopChange             = 'auth')

c['status'].append(
    html.WebStatus(
        http_port            = 'unix:/tmp/buildbot.sock',
        change_hook_dialects = {
                'github': {
                        'secret': secrets['web']['github'],
                        'strict': True,
                }
        },
        authz                = authz))

#c['status'].append(
#    mail.MailNotifier(
#        fromaddr = 'buildbot@m-labs.hk',
#        mode     = 'change'))

c['status'].append(
    words.IRC(
        'irc.freenode.net', 'bb-m-labs',
        channels = ['#m-labs'],
        notify_events = {
            'warnings'           : True,
            'exception'          : True,
            'failure'            : True,
            'failureToSuccess'   : True,
            'exceptionToSuccess' : True,
            'warningsToSuccess'  : True,
        }))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'ARTIQ'
c['titleURL'] = 'http://m-labs.hk/artiq'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://m-labs-buildserver.lan/buildbot/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite3',
}
